{"version":3,"sources":["config/express.js"],"names":[],"mappings":"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","file":"config/express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nimport express from 'express';\nimport helmet from 'helmet';\nimport morgan from 'morgan';\nimport compression from 'compression';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\nimport lusca from 'lusca';\nimport config from './environment';\nimport passport from 'passport';\nimport session from 'express-session';\nimport mongoose from 'mongoose';\nimport redis from 'redis';\n\nvar sessionStore;\n\nif (config.session.store === 'Redis') {\n  var RedisStore = require('connect-redis')(session);\n  sessionStore = new RedisStore({\n    client: redis.createClient(config.session.client),\n    ttl: config.session.ttl\n  });\n} else {\n  var MongoStore = require('connect-mongo')(session);\n  sessionStore = new MongoStore({\n    mongooseConnection: mongoose.connection,\n    ttl: config.session.ttl\n  });\n}\n\nexport default function(app) {\n  var env = app.get('env');\n\n  app.set('views', config.root + '/server/views');\n  app.engine('html', require('ejs').renderFile);\n  app.set('view engine', 'html');\n  app.use(helmet());\n  app.use(compression());\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.use(cookieParser());\n  app.use(passport.initialize());\n\n  // Persist sessions with mongoStore / sequelizeStore\n  // We need to enable sessions for passport-twitter because it's an\n  // oauth 1.0 strategy, and Lusca depends on sessions\n  app.use(session({\n    secret: config.secrets.session,\n    saveUninitialized: true,\n    resave: false,\n    store: sessionStore\n  }));\n\n  /**\n   * Lusca - express server security\n   * https://github.com/krakenjs/lusca\n   */\n  if ('test' !== env) {\n    app.use(lusca({\n      csrf: {\n        angular: true\n      },\n      xframe: 'SAMEORIGIN',\n      hsts: {\n        maxAge: 31536000, //1 year, in seconds\n        includeSubDomains: true,\n        preload: true\n      },\n      xssProtection: true\n    }));\n  }\n\n  app.set('appPath', path.join(config.root, 'client'));\n\n  if ('production' === env) {\n//    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n    app.use(express.static(app.get('appPath')));\n    app.use(morgan('dev'));\n  }\n\n  if ('development' === env) {\n    app.use(require('connect-livereload')());\n  }\n\n  if ('development' === env || 'test' === env) {\n    app.use(express.static(path.join(config.root, '.tmp')));\n    app.use(express.static(app.get('appPath')));\n    app.use(morgan('dev'));\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n}\n"],"sourceRoot":"/source/"}